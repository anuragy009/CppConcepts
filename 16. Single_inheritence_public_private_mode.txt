#include<iostream>
using namespace std;
class Base
{
    int data1; // private by default and is not inheritable
public:
    int data2;
    void setData();
    int getData1();
    int getData2();
};

void Base ::setData(void)
{
    data1 = 10;
    data2 = 20;
}

int Base::getData1()
{
    return data1;
}

int Base::getData2()
{
    return data2;
}

class Derived : public Base
{ 								// Class is being derived publically
    int data3;							// We can access the public member fns, data members of base class outside the class derived, by creating an object
								// data1 will not be inherited as it is private
public:
    void process();
    void display();
};

void Derived ::process()
{
    data3 = data2 * getData1();
}

void Derived ::display()
{
    cout << "Value of data 1 is " << getData1() << endl;
    cout << "Value of data 2 is " << data2 << endl;
    cout << "Value of data 3 is " << data3 << endl;
}

int main()
{
    Derived der;
    der.setData();
    der.process();
    der.display();
    cout<<der.getData1()<<"  ";					// Since getData1 and getData2 are public and derived publically, they can be accessed outside the class.
    cout<<der.getData2();

    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if the mode of deriving was private instead of public, the Public members of Base class would have become private now and to access them, we would have to use public methods in derived class that print or give the above result. We weren't allowed to use setdata in the main ().
