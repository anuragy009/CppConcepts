#include<iostream>
using namespace std;

class BaseClass{
    public:
        int var_base;
        void display(){
            cout<<"Dispalying Base class variable var_base "<<var_base<<endl;
        }
};

class DerivedClass : public BaseClass{
    public:
            int var_derived;
            void display(){
                cout<<"Dispalying Base class variable var_base "<<var_base<<endl;
                cout<<"Dispalying Derived class variable var_derived "<<var_derived<<endl;
            }
};

int main(){
    BaseClass * base_class_pointer;
    BaseClass obj_base;
    DerivedClass obj_derived;
    base_class_pointer = &obj_derived; // Pointing base class pointer to derived class

    base_class_pointer->var_base = 34;
    // base_class_pointer->var_derived= 134; // Will throw an error, not allowed
    base_class_pointer->display();

    base_class_pointer->var_base = 3400; 
    base_class_pointer->display();

    DerivedClass * derived_class_pointer;
    derived_class_pointer = &obj_derived;
    derived_class_pointer->var_base = 9448;
    derived_class_pointer->var_derived = 98;
    derived_class_pointer->display();

    return 0;
}

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

We can clearly see that Base class pointer pointing to object of derived class object has access to data members and member functions of Base class alone ( unlike derived class pointer pointing to object of derived class) . The default binding of Base class pointer is with the member function defined in the base class. But what if, we want to access the member function of derived class defined and declared with the same name ? Solution is : we will make the function in base class as virtual. Then at run time , the pointer will come to know that it has to invoke the derived class's function.  